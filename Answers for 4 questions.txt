- What is your favourite design pattern, and why?
My favourite design pattern is MVC. Swift and Xcode already support MVC architecture. A model is data used by a program. Generally, it can be a database, XML file, etc. In this app, the model is a local SQLite DB. A view is the means of displaying the user interface to users. Like storyboard, SwiftUI. A controller updates both models and views. It accepts user input and performs the related updates. Like view controller mechanism in iOS app. So in this small project, I just followed the convention without too much thinking. But I did some file folders organising according to MVC structure to make files more manageable.

- For your favourite programming language, tell me about a new (or upcoming) language feature that has you excited. Why is it exciting for you?
I like python. It has extensive support libraries and clean object-oriented designs. Especially Pandas. It is very easy to manipulate a data file. Pandas provide extremely streamlined forms of data representation. Also, It provides a set of important commands and features which easily analyze data. I use Pandas a lot to perform various tasks like filtering data according to certain conditions, or segmenting and segregating the data according to preference, etc. There is a very small example. I have two arrays or one-dimension matrix. df_1 = pd.DataFrame([1,2,3]) and df_2 = pd.DataFrame([7,8,9]). If I want to add these two array element by element. I just need to do df_3 = df_1 + df_2. No need to use two "for"s to iterate every element to do addition.


- What do you hate to see when you're reviewing your own of another colleague's code?
I hate the messy naming. There are two kinds of naming messy. 1. prefix and suffix. Maybe everybody comes from a different coding background; there is a different naming method in different coding language. For example, a button in java will use "btn" as the prefix. But in Xcode, it likes to use "Button" as the suffix. But in the same company, we need to follow the company's naming convention, to abandon our customed in naming. I hate mixing these two ways in the same project. 2. The naming is meaningless. Especially without correct comment or explanation, you have to guess what it is. Btw, the beautiful coding format is always eye-enjoyable. 

- Tell me about a time you fixed a performance issue?
In this small project, it costs me a few hours to figure out how to fetch data in background mode. Because I use Xcode 11 and iOS 13.2, some methods are already decrepitated, for example, setMinimumBackgroundFetchInterval, change to use BackgroundTasks and BGAppRefreshTask etc. I googled a lot, and there is only one post in the StackOverflow pasting some Apple WWDC 2019 screenshots. So I have to check this video and learn to do it in a new way. The other improving performance approach in this project is I use NSCache to cache images from internet. 